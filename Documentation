C Programming Language
The interface of C standard library is defined by the following collection of headers.

<assert.h>	Conditionally compiled macro that compares its argument to zero
<complex.h> (since C99)	Complex number arithmetic
<ctype.h>	Functions to determine the type contained in character data
<errno.h>	Macros reporting error conditions
<fenv.h> (since C99)	Floating-point environment
<float.h>	Limits of floating-point types
<inttypes.h> (since C99)	Format conversion of integer types
<iso646.h> (since C95)	Alternative operator spellings
<limits.h>	Ranges of integer types
<locale.h>	Localization utilities
<math.h>	Common mathematics functions
<setjmp.h>	Nonlocal jumps
<signal.h>	Signal handling
<stdalign.h> (since C11)	alignas and alignof convenience macros
<stdarg.h>	Variable arguments
<stdatomic.h> (since C11)	Atomic operations
<stdbit.h> (since C23)	Macros to work with the byte and bit representations of types
<stdbool.h> (since C99)	Macros for boolean type
<stdckdint.h> (since C23)	macros for performing checked integer arithmetic
<stddef.h>	Common macro definitions
<stdint.h> (since C99)	Fixed-width integer types
<stdio.h>	Input/output
<stdlib.h>	General utilities: memory management, program utilities, string conversions, random numbers, algorithms
<stdnoreturn.h> (since C11)	noreturn convenience macro
<string.h>	String handling
<tgmath.h> (since C99)	Type-generic math (macros wrapping math.h and complex.h)
<threads.h> (since C11)	Thread library
<time.h>	Time/date utilities
<uchar.h> (since C11)	UTF-16 and UTF-32 character utilities
<wchar.h> (since C95)	Extended multibyte and wide character utilities
<wctype.h> (since C95)	Functions to determine the type contained in wide character data
References
C23 standard (ISO/IEC 9899:2023):
7.1.2 Standard headers
C17 standard (ISO/IEC 9899:2018):
7.1.2 Standard headers (p: 131-132)
C11 standard (ISO/IEC 9899:2011):
7.1.2 Standard headers (p: 181-182)
C99 standard (ISO/IEC 9899:1999):
7.1.2 Standard headers (p: 165)
C89/C90 standard (ISO/IEC 9899:1990):
4.1.2 Standard headers
See also
C++ documentation for C++ Standard Library header files

ricorda di fare free memory!!!!!!!!!!!!!!!!!
metti nell'ordine giusto le cose
le strighe si comparano con srtcpy



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXNOME 30

typedef struct {
    int anno;
    char nome[MAXNOME];
    int numeroparole;
} articoli;

// Funzione di lettura
void lettura(articoli *infoarticoli, int dim) {
    for (int i = 0; i < dim; i++) {
        printf("aggiungi l'anno dell'articolo: ");
        scanf("%d", &(infoarticoli + i)->anno);
        while (getchar() != '\n');
        printf("il nome: ");
        fgets((infoarticoli + i)->nome, MAXNOME, stdin);
        (infoarticoli + i)->nome[strcspn((infoarticoli + i)->nome, "\n")] = '\0';
        printf("il numero di parole: ");
        scanf("%d", &(infoarticoli + i)->numeroparole);
    }
}

// Funzione di stampa
void stampa(articoli *infoarticoli, int dim) {
    for (int i = 0; i < dim; i++) {
        printf("%d\t%s\t\t\t%d\n", (infoarticoli + i)->anno, (infoarticoli + i)->nome, (infoarticoli + i)->numeroparole);
    }
}

// Funzione per trovare la posizione con il numero di parole minore
int trova_minimo(articoli *infoarticoli, int dim) {
    int minimo = infoarticoli[0].numeroparole;
    int posizione = 0;
    for (int i = 1; i < dim; i++) {
        if (infoarticoli[i].numeroparole < minimo) {
            minimo = infoarticoli[i].numeroparole;
            posizione = i;
        }
    }
    return posizione;
}

// Funzione per inserire un nuovo articolo
void inserimento(articoli **infoarticoli, int *dim, articoli nuovo) {
    int posizione = trova_minimo(*infoarticoli, *dim);

    *dim += 1;
    *infoarticoli = realloc(*infoarticoli, (*dim) * sizeof(articoli));
    if (*infoarticoli == NULL) {
        fprintf(stderr, "Errore di reallocazione della memoria\n");
        exit(1);
    }

    // Spostare gli articoli a destra di una posizione
    for (int i = *dim - 1; i > posizione; i--) {
        (*infoarticoli)[i] = (*infoarticoli)[i - 1];
    }

    // Inserire il nuovo articolo nella posizione trovata
    (*infoarticoli)[posizione] = nuovo;
}

// Funzione per creare un array di articoli con numero di parole sotto la media
articoli* articoli_sotto_la_media(articoli *infoarticoli, int dim, int *nuova_dim) {
    int somma = 0;
    for (int i = 0; i < dim; i++) {
        somma += infoarticoli[i].numeroparole;
    }
    int media = somma / dim;

    // Conta quanti articoli hanno un numero di parole sotto la media
    *nuova_dim = 0;
    for (int i = 0; i < dim; i++) {
        if (infoarticoli[i].numeroparole < media) {
            (*nuova_dim)++;
        }
    }

    // Alloca memoria per il nuovo array
    articoli *nuovi_articoli = malloc(*nuova_dim * sizeof(articoli));
    if (nuovi_articoli == NULL) {
        fprintf(stderr, "Errore di allocazione della memoria\n");
        exit(1);
    }

    // Copia gli articoli che hanno un numero di parole sotto la media
    int j = 0;
    for (int i = 0; i < dim; i++) {
        if (infoarticoli[i].numeroparole < media) {
            nuovi_articoli[j++] = infoarticoli[i];
        }
    }

    return nuovi_articoli;
}

int main() {
    int dim;
    printf("Quanti articoli vuoi inserire? ");
    scanf("%d", &dim);

    articoli *infoarticoli = malloc(dim * sizeof(articoli));
    if (infoarticoli == NULL) {
        fprintf(stderr, "Errore di allocazione della memoria\n");
        return 1;
    }

    lettura(infoarticoli, dim);
    stampa(infoarticoli, dim);

    // Creare un nuovo articolo da inserire
    articoli nuovo;
    printf("Aggiungi l'anno del nuovo articolo: ");
    scanf("%d", &nuovo.anno);
    while (getchar() != '\n');
    printf("Il nome del nuovo articolo: ");
    fgets(nuovo.nome, MAXNOME, stdin);
    nuovo.nome[strcspn(nuovo.nome, "\n")] = '\0';
    printf("Il numero di parole del nuovo articolo: ");
    scanf("%d", &nuovo.numeroparole);

    // Inserire il nuovo articolo
    inserimento(&infoarticoli, &dim, nuovo);

    // Stampare di nuovo per verificare l'inserimento
    printf("Dopo l'inserimento:\n");
    stampa(infoarticoli, dim);

    // Trova articoli con numero di parole sotto la media
    int nuova_dim;
    articoli *nuovi_articoli = articoli_sotto_la_media(infoarticoli, dim, &nuova_dim);

    // Stampare gli articoli con numero di parole sotto la media
    printf("Articoli con numero di parole sotto la media:\n");
    stampa(nuovi_articoli, nuova_dim);

    free(infoarticoli);
    free(nuovi_articoli);
    return 0;
}









### Guida Dettagliata su Ricerca Binaria e Selection Sort su Array di Struct in C

Questa guida fornirà una spiegazione approfondita su come implementare la ricerca binaria e l'ordinamento con Selection Sort su un array di strutture (struct) in C. Alla fine della guida, sarai in grado di comprendere e programmare algoritmi di ricerca e ordinamento per applicazioni reali con array di struct.

## Ricerca Binaria

### Cos'è la Ricerca Binaria?
La ricerca binaria è un algoritmo efficiente per trovare un elemento in un array ordinato. L'algoritmo lavora dividendo ripetutamente l'array a metà fino a quando l'elemento desiderato viene trovato o si determina che l'elemento non è presente.

### Implementazione della Ricerca Binaria

#### Algoritmo:
1. Inizia con due puntatori, uno all'inizio (`primo`) e uno alla fine (`ultimo`) dell'array.
2. Calcola l'indice dell'elemento centrale.
3. Confronta l'elemento centrale con l'elemento da cercare.
   - Se sono uguali, l'elemento è trovato.
   - Se l'elemento centrale è maggiore, ripeti la ricerca nella metà sinistra dell'array.
   - Se l'elemento centrale è minore, ripeti la ricerca nella metà destra dell'array.
4. Ripeti i passi 2 e 3 fino a quando l'elemento viene trovato o i puntatori si incrociano.

#### Codice:
Ecco un esempio di implementazione della ricerca binaria su un array di strutture `articoli`, cercando un articolo per nome:

```c
#include <stdio.h>
#include <string.h>

#define MAXNOME 50

typedef struct {
    char nome[MAXNOME];
    int anno;
    int nparole;
} articoli;

int ricerca_binaria(articoli arr[], int dim, const char *nome) {
    int primo = 0;
    int ultimo = dim - 1;

    while (primo <= ultimo) {
        int medio = (primo + ultimo) / 2;
        int cmp = strcmp(arr[medio].nome, nome);

        if (cmp == 0) {
            return medio; // Trovato
        } else if (cmp < 0) {
            primo = medio + 1; // Cerca a destra
        } else {
            ultimo = medio - 1; // Cerca a sinistra
        }
    }

    return -1; // Non trovato
}

int main() {
    articoli articoli[] = {
        {"Alpha", 2001, 100},
        {"Beta", 2002, 150},
        {"Delta", 2004, 200},
        {"Gamma", 2003, 250}
    };

    int dim = sizeof(articoli) / sizeof(articoli[0]);
    char nome[MAXNOME];

    printf("Inserisci il nome dell'articolo da cercare: ");
    scanf("%s", nome);

    int posizione = ricerca_binaria(articoli, dim, nome);
    if (posizione != -1) {
        printf("Articolo trovato alla posizione %d.\n", posizione);
    } else {
        printf("Articolo non trovato.\n");
    }

    return 0;
}
```

### Complessità Computazionale della Ricerca Binaria
- **Caso migliore**: \( O(1) \) - L'elemento si trova al primo confronto.
- **Caso peggiore**: \( O(\log N) \) - L'elemento non è presente e si dimezza l'array ad ogni passo.
- **Caso medio**: \( O(\log N) \) - Il numero di confronti è proporzionale a \( \log N \).

## Selection Sort

### Cos'è il Selection Sort?
Il Selection Sort è un algoritmo di ordinamento semplice e intuitivo che lavora selezionando ripetutamente l'elemento minimo (o massimo) dall'array non ordinato e scambiandolo con l'elemento all'inizio dell'array non ordinato.

### Implementazione del Selection Sort

#### Algoritmo:
1. Trova l'elemento minimo nell'array non ordinato.
2. Scambia l'elemento minimo con il primo elemento dell'array non ordinato.
3. Ripeti il processo per il resto dell'array.

#### Codice:
Ecco un esempio di implementazione del Selection Sort su un array di strutture `articoli`, ordinando per nome:

```c
#include <stdio.h>
#include <string.h>

#define MAXNOME 50

typedef struct {
    char nome[MAXNOME];
    int anno;
    int nparole;
} articoli;

void scambia(articoli *a, articoli *b) {
    articoli temp = *a;
    *a = *b;
    *b = temp;
}

void selection_sort(articoli arr[], int dim) {
    for (int i = 0; i < dim - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < dim; j++) {
            if (strcmp(arr[j].nome, arr[min_idx].nome) < 0) {
                min_idx = j;
            }
        }
        scambia(&arr[i], &arr[min_idx]);
    }
}

void stampa(articoli arr[], int dim) {
    for (int i = 0; i < dim; i++) {
        printf("%s\t\t%d\t\t\t%d\n", arr[i].nome, arr[i].anno, arr[i].nparole);
    }
}

int main() {
    articoli articoli[] = {
        {"Gamma", 2003, 250},
        {"Beta", 2002, 150},
        {"Delta", 2004, 200},
        {"Alpha", 2001, 100}
    };

    int dim = sizeof(articoli) / sizeof(articoli[0]);

    printf("Array prima dell'ordinamento:\n");
    stampa(articoli, dim);

    selection_sort(articoli, dim);

    printf("\nArray dopo l'ordinamento:\n");
    stampa(articoli, dim);

    return 0;
}
```

### Complessità Computazionale del Selection Sort
- **Caso migliore, medio, peggiore**: \( O(N^2) \) - Il numero di confronti è sempre \( N(N-1)/2 \).

### Applicazione Reale: Ordinamento e Ricerca su Array di Struct

#### Scenario 1: Gestione di una Libreria
Supponiamo di voler gestire una libreria dove ogni libro ha un titolo, un autore e un anno di pubblicazione. Possiamo utilizzare le strutture per memorizzare queste informazioni e ordinare i libri per titolo.

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXTITOLO 100
#define MAXAUTORE 50

typedef struct {
    char titolo[MAXTITOLO];
    char autore[MAXAUTORE];
    int anno;
} libro;

void scambia(libro *a, libro *b) {
    libro temp = *a;
    *a = *b;
    *b = temp;
}

void selection_sort(libro arr[], int dim) {
    for (int i = 0; i < dim - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < dim; j++) {
            if (strcmp(arr[j].titolo, arr[min_idx].titolo) < 0) {
                min_idx = j;
            }
        }
        scambia(&arr[i], &arr[min_idx]);
    }
}

int ricerca_binaria(libro arr[], int dim, const char *titolo) {
    int primo = 0;
    int ultimo = dim - 1;

    while (primo <= ultimo) {
        int medio = (primo + ultimo) / 2;
        int cmp = strcmp(arr[medio].titolo, titolo);

        if (cmp == 0) {
            return medio; // Trovato
        } else if (cmp < 0) {
            primo = medio + 1; // Cerca a destra
        } else {
            ultimo = medio - 1; // Cerca a sinistra
        }
    }

    return -1; // Non trovato
}

void stampa(libro arr[], int dim) {
    for (int i = 0; i < dim; i++) {
        printf("Titolo: %s, Autore: %s, Anno: %d\n", arr[i].titolo, arr[i].autore, arr[i].anno);
    }
}

int main() {
    libro libreria[] = {
        {"Il Nome della Rosa", "Umberto Eco", 1980},
        {"1984", "George Orwell", 1949},
        {"Cime Tempestose", "Emily Bronte", 1847},
        {"Il Signore degli Anelli", "J.R.R. Tolkien", 1954}
    };

    int dim = sizeof(libreria) / sizeof(libreria[0]);

    printf("Libreria prima dell'ordinamento:\n");
    stampa(libreria, dim);

    selection_sort(libreria, dim);

    printf("\nLibreria dopo l'ordinamento:\n");
    stampa(libreria, dim

);

    char titolo[MAXTITOLO];
    printf("\nInserisci il titolo del libro da cercare: ");
    scanf("%s", titolo);

    int posizione = ricerca_binaria(libreria, dim, titolo);
    if (posizione != -1) {
        printf("Libro trovato alla posizione %d.\n", posizione);
    } else {
        printf("Libro non trovato.\n");
    }

    return 0;
}
```

### Scenario 2: Gestione di uno Stock di Prodotti
Un altro esempio potrebbe essere la gestione di uno stock di prodotti in un magazzino, dove ogni prodotto ha un nome, un prezzo e una quantità disponibile. Possiamo ordinare i prodotti per nome e cercare un prodotto specifico per nome.

### Conclusione
Questa guida ha coperto in dettaglio l'implementazione della ricerca binaria e del Selection Sort su array di struct in C, includendo scenari reali per applicazioni pratiche. Con queste conoscenze, dovresti essere in grado di programmare applicazioni complesse che richiedono la gestione, l'ordinamento e la ricerca di dati strutturati.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAXMATRICOLA 9
#define MAXNOME 10
#define MAXCOGNOME 30

typedef struct {
    char matricola[MAXMATRICOLA];
    char nome[MAXNOME];
    char cognome[MAXCOGNOME];
    int esami;
} studente;

typedef struct {
    char matricola[MAXMATRICOLA];
    int esami;
    bool media;
} studentemedia;

void lettura(studente *s, int dim) {
    for (int i = 0; i < dim; i++) {
        printf("Matricola: ");
        fgets((s + i)->matricola, MAXMATRICOLA, stdin);
        (s + i)->matricola[strcspn((s + i)->matricola, "\n")] = '\0';

        printf("Nome: ");
        fgets((s + i)->nome, MAXNOME, stdin);
        (s + i)->nome[strcspn((s + i)->nome, "\n")] = '\0';

        printf("Cognome: ");
        fgets((s + i)->cognome, MAXCOGNOME, stdin);
        (s + i)->cognome[strcspn((s + i)->cognome, "\n")] = '\0';

        printf("Esami sostenuti: ");
        scanf("%d", &(s + i)->esami);
        while (getchar() != '\n'); // Pulizia del buffer di input

        printf("Studente n.%d aggiunto!\n", i + 1);
    }
}

void media(studente *s, int dim) {
    int somma = 0;
    for (int i = 0; i < dim; i++) {
        somma += (s + i)->esami;
    }
    int media = somma / dim;

    // Allocazione dinamica del vettore studentemedia
    studentemedia *smedia = malloc(dim * sizeof(studentemedia));
    if (smedia == NULL) {
        fprintf(stderr, "Errore di allocazione della memoria\n");
        exit(EXIT_FAILURE);
    }

    // Copia dei dati degli studenti nel vettore studentemedia
    for (int i = 0; i < dim; i++) {
        strcpy(smedia[i].matricola, s[i].matricola);
        smedia[i].esami = s[i].esami;
    }

    // Verifica se gli studenti hanno sostenuto un numero di esami superiore alla media
    for (int i = 0; i < dim; i++) {
        smedia[i].media = (smedia[i].esami > media);
        printf("%s\t\t %s\n", smedia[i].matricola, smedia[i].media ? "true" : "false");
    }

    free(smedia);
}

void stampa(studente *s, int dim) {
    printf("MATRICOLA\tNOME\tCOGNOME\tNUMERO ESAMI SOSTENUTI\n");
    for (int i = 0; i < dim; i++) {
        printf("%s\t%s\t%s\t%d\n", (s + i)->matricola, (s + i)->nome, (s + i)->cognome, (s + i)->esami);
    }
}

int ricerca_binaria(studente arr[], int dim, char *matricola) {
    int primo = 0;
    int ultimo = dim - 1;

    while (primo <= ultimo) {
        int medio = (primo + ultimo) / 2;
        int cmp = strcmp(arr[medio].matricola, matricola);

        if (cmp == 0) {
            return medio; // Trovato
        } else if (cmp < 0) {
            primo = medio + 1; // Cerca a destra
        } else {
            ultimo = medio - 1; // Cerca a sinistra
        }
    }

    return -1; // Non trovato
}

int main() {
    int dim;
    printf("Quanti studenti vuoi aggiungere?\n");
    scanf("%d", &dim);
    while (getchar() != '\n'); // Pulizia del buffer di input

    studente *s = malloc(dim * sizeof(studente));
    if (s == NULL) {
        fprintf(stderr, "Errore di allocazione della memoria\n");
        exit(EXIT_FAILURE);
    }

    lettura(s, dim);
    stampa(s, dim);

    printf("----------------------\n");
    printf("Lo studente è sopra la media?\n");
    media(s, dim);

    char matricola[MAXMATRICOLA];
    printf("Inserisci la matricola dello studente da cercare: ");
    fgets(matricola, MAXMATRICOLA, stdin);
    matricola[strcspn(matricola, "\n")] = '\0';

    int posizione = ricerca_binaria(s, dim, matricola);
    if (posizione != -1) {
        printf("Studente trovato alla posizione %d.\n", posizione);
    } else {
        printf("Studente non trovato.\n");
    }

    free(s); // Libera la memoria allocata
    return 0;
}









